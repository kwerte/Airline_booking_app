CREATE TABLE airport(
     IATA           char(3) NOT NULL,
     name           varchar(40) NOT NULL,
     country        varchar(20),
     state          char(2) CHECK (country in ('US', 'Canada') OR NULL),
     PRIMARY KEY(IATA)
     );
	 
CREATE TABLE airline(
     airline_code   char(2) NOT NULL,
     name           varchar(20),
     country        varchar(20),
     PRIMARY KEY(airline_code)
     );
	 
CREATE TABLE flight(
     flight_num     int NOT NULL,
     date           char(10),
     airline_code   char(2),
     dep_IATA       char(3),
     dest_IATA      char(3),
     dep_time       char(5),
     arrive_time    char(5),
     cap_first      int, 
     cap_econ       int,
     PRIMARY KEY(flight_num, date, airline_code),
     FOREIGN KEY(airline_code) REFERENCES airline,
     FOREIGN KEY(dep_IATA) REFERENCES airport,
     FOREIGN KEY(dest_IATA) REFERENCES airport
     );
     
CREATE TABLE customer(
     email_address  varchar(25) NOT NULL,
     name           varchar(20),
     home_IATA      char(3),
     PRIMARY KEY(email_address),
     FOREIGN KEY(home_IATA) REFERENCES airport
     );

CREATE TABLE customer_address(
     email_address  varchar(25) NOT NULL,
     country        varchar(20) NOT NULL,
     state          char(2) CHECK (country in ('US', 'Canada') OR NULL),
     city           varchar(20) NOT NULL,
     street         varchar(30),
     PRIMARY KEY(email_address, country, city, street),
     FOREIGN KEY(email_address) REFERENCES customer
     );
	 
CREATE FUNCTION addressEqual(email_addr varchar(25), country1 varchar(20), state1 char(2), city1 varchar(20), street1 varchar(30))
	RETURNS integer
	LANGUAGE PLPGSQL AS $BODY$
	DECLARE
	 	ret integer;
	BEGIN
		ret:=(CASE WHEN EXISTS(SELECT count(*) FROM customer_address
							WHERE customer_address.email_address = email_addr
							AND
							customer_address.country = country1
							AND
							customer_address.state = state1
							AND
							customer_address.city = city1
							AND
							customer_address.street = street1)
				THEN 1
				ELSE 0
			 	END);
		RETURN ret;
	END;
	$BODY$;
	 
CREATE TABLE customer_credit_card(
     email_address  varchar(25) NOT NULL,
     card_number	numeric(16) NOT NULL,
     card_country        varchar(20) NOT NULL,
     card_state          char(2) CHECK (card_country in ('US', 'Canada') OR NULL),
     card_city           varchar(20) NOT NULL,
     card_street         varchar(30),
     PRIMARY KEY(card_number),
     FOREIGN KEY(email_address) REFERENCES customer,
     CONSTRAINT check_address CHECK(addressEqual(email_address, card_country, card_state, card_city, card_street)=1)
     );
	 
CREATE FUNCTION price_larger(flight_num1	int,
				 date1           char(10),
				 airline_code1   char(2),
				 class1          varchar(7),
				 price1          numeric(5,2))
	RETURNS int
	LANGUAGE PLPGSQL AS $BODY$
	DECLARE
	 	ret integer;
	BEGIN
		ret:=(CASE WHEN class1 = 'Economy' THEN 1
			  	WHEN NOT EXISTS(SELECT price 
     					    	FROM price 
     					    	WHERE price.flight_num = flight_num1
					    		AND price.date = date1 
     					    	AND price.airline_code = airline_code1
								AND price.class != class1)
			  	THEN 1
			  	WHEN price1>any(SELECT price 
     					    	FROM price 
     					    	WHERE price.flight_num = flight_num1
					    		AND price.date = date1
     					    	AND price.airline_code = airline_code1
								AND price.class != class1)
				THEN 1
				ELSE 0
			 	END);
		RETURN ret;
	END;
	$BODY$;

CREATE TABLE price(
     flight_num     int,
     date           char(10),
     airline_code   char(2),
     class          varchar(7) CHECK (class in ('First', 'Economy')),
     price          numeric(5,2),
     PRIMARY KEY(flight_num, date, airline_code, class),
     FOREIGN KEY(flight_num, date, airline_code) REFERENCES flight,
	 CONSTRAINT price_case CHECK(price_larger(flight_num, date, airline_code, class, price)=1)
     );
	 
CREATE TABLE booking(
     email_address varchar(25) NOT NULL, 
     flight_num     int,
     date           char(10),
     airline_code   char(2),
     class         varchar(7) CHECK (class in ('First', 'Economy')), 
     card_number   numeric(16), 
     PRIMARY KEY(email_address, flight_num, date, airline_code), 
     FOREIGN KEY(email_address) REFERENCES customer,
     FOREIGN KEY(flight_num, date, airline_code) REFERENCES flight,
     FOREIGN KEY(card_number) REFERENCES customer_credit_card
     );
